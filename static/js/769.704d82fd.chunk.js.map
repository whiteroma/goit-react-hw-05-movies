{"version":3,"file":"static/js/769.704d82fd.chunk.js","mappings":"0OAEaA,EAAcC,EAAAA,GAAAA,GAAH,0FAMXC,EAAcD,EAAAA,GAAAA,GAAH,2NAgBXE,EAAcF,EAAAA,GAAAA,KAAH,mE,kBCnBT,SAASG,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACHL,GAILM,MAAM,sCAAD,OACmCN,EADnC,qEAGFO,MAAK,SAAAC,GACJ,OAAIA,EAAIC,GACCD,EAAIE,OAEN,IAAIC,QAAQC,OAAO,IAAIC,MAAM,iBACrC,IACAN,MAAK,SAAAO,GAAM,OAAIV,EAAWU,EAAOC,QAAtB,GACf,GAAE,CAACf,IACJgB,QAAQC,IAAId,IAGV,SAAC,KAAD,UACGA,EAAQe,OAAS,GAChB,SAACvB,EAAD,UACGQ,EAAQgB,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC7BC,EAAa,IAAIC,KAAKF,GAAYG,iBACxC,OACE,UAAC7B,EAAD,YACE,sCACU,SAACC,EAAD,UAAcuB,QAExB,uBAAIC,KACJ,4CACgB,SAACxB,EAAD,UAAc0B,SANdJ,EAUrB,OAGH,6CAIP,C","sources":["components/reviews/Reviews.styled.jsx","components/reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 30px;\n`;\n\nexport const ReviewsItem = styled.li`\n  gap: 10px;\n  margin-top: 15px;\n\n  & > p {\n    font-size: 0.94em;\n    color: #363434;\n    margin: 10px 0 0px 20px;\n    text-align: justify;\n  }\n\n  & > h5 {\n    text-align: end;\n  }\n`;\n\nexport const ReviewsSpan = styled.span`\n  color: orangered;\n  font-weight: bold;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ReviewsList, ReviewsItem, ReviewsSpan } from './Reviews.styled';\nimport { Container } from 'components/Layout/Layout.styled';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=bfc78256055c27ed6be30c1c43cfe9c3&language=en-US`\n    )\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return new Promise.reject(new Error('Nothing found'));\n      })\n      .then(review => setReviews(review.results));\n  }, [movieId]);\n  console.log(reviews);\n\n  return (\n    <Container>\n      {reviews.length > 0 ? (\n        <ReviewsList>\n          {reviews.map(({ id, author, content, updated_at }) => {\n            const updateTime = new Date(updated_at).toLocaleString();\n            return (\n              <ReviewsItem key={id}>\n                <h4>\n                  Author: <ReviewsSpan>{author}</ReviewsSpan>\n                </h4>\n                <p>{content}</p>\n                <h5>\n                  Last updated: <ReviewsSpan>{updateTime}</ReviewsSpan>\n                </h5>\n              </ReviewsItem>\n            );\n          })}\n        </ReviewsList>\n      ) : (\n        <h4>No reviews yet.</h4>\n      )}\n    </Container>\n  );\n}\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewsSpan","Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","fetch","then","res","ok","json","Promise","reject","Error","review","results","console","log","length","map","id","author","content","updated_at","updateTime","Date","toLocaleString"],"sourceRoot":""}